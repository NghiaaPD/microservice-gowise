@baseUrl = http://localhost:8080
@userA = 11111111-1111-1111-1111-111111111111
@userB = 22222222-2222-2222-2222-222222222222
@adminId = 99999999-9999-9999-9999-999999999999
@adminJwt = eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI5OTk5OTk5OS05OTk5LTk5OTktOTk5OS05OTk5OTk5OTk5OTkiLCJyb2xlcyI6WyJBRE1JTiJdLCJpYXQiOjE3NTk2NjUwMzEsImV4cCI6MTc1OTY2NTYzMX0.vxa7NDzbdxhAu8AdqT7eKZcjn2qKOCLrBZu_IomAqSI
@userAJwt = eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMTExMTExMS0xMTExLTExMTEtMTExMS0xMTExMTExMTExMTEiLCJyb2xlcyI6WyJVU0VSIl0sImlhdCI6MTc1OTY2NTAxMiwiZXhwIjoxNzU5NjY1NjEyfQ.VmrHK-Zf05nhKz2bOslU1c1qyf3OrPf7nVJ_G35G5-k

/**
### Lấy JWT User A
GET http://localhost:8080/api/auth/token?userId=11111111-1111-1111-1111-111111111111&roles=USER

### Lấy JWT User B
GET http://localhost:8080/api/auth/token?userId=22222222-2222-2222-2222-222222222222&roles=USER

### Lấy JWT Admin
GET http://localhost:8080/api/auth/token?userId=99999999-9999-9999-9999-999999999999&roles=ADMIN

**/

/*============= USER FLOW — X-User-Id header =============*/

### 1) Tạo bài viết (User A) -> lưu postId
# @name createPost
POST {{baseUrl}}/api/posts
Content-Type: application/json
X-User-Id: {{userA}}

{
  "title": "Hello World",
  "content": "My very first blog post"
}

> {%
    // Lưu postId để dùng cho các request sau
    const id = response.body.data.id;
    client.global.set("postId", id);
    client.log("Saved postId = " + id);
%}

### 2) Tác giả xem bài vừa tạo (vẫn PENDING)
GET {{baseUrl}}/api/posts/{{postId}}
X-User-Id: {{userA}}

### 3) Người khác (User B) cố xem bài PENDING -> 403
GET {{baseUrl}}/api/posts/{{postId}}
X-User-Id: {{userB}}

### 4) Admin duyệt bài -> APPROVE
# @name adminApprove
POST {{baseUrl}}/api/admin/posts/{{postId}}/moderate
Authorization: Bearer {{adminJwt}}
X-User-Id: {{adminId}}
Content-Type: application/json


{
  "action": "APPROVE",
  "note": "Looks good"
}

### 5) Feed công khai: bài đã APPROVED sẽ xuất hiện
GET {{baseUrl}}/api/posts/feed

### 6) Like bài (User B) -> trả về tổng số like
POST {{baseUrl}}/api/posts/{{postId}}/like
X-User-Id: {{userB}}

### 7) Like lần nữa (idempotent, count không tăng)
POST {{baseUrl}}/api/posts/{{postId}}/like
X-User-Id: {{userB}}

### 8) Unlike (User B)
DELETE {{baseUrl}}/api/posts/{{postId}}/like
X-User-Id: {{userB}}

### 9) Sửa bài (User A) -> quay về PENDING, publishedAt = null
PUT {{baseUrl}}/api/posts/{{postId}}
Content-Type: application/json
X-User-Id: {{userA}}

{
  "title": "Hello World (edited)",
  "content": "Updated content"
}

### 10) Admin Reject bài sau khi sửa (để test REJECT)
POST {{baseUrl}}/api/admin/posts/{{postId}}/moderate
Authorization: Bearer {{adminJwt}}
X-User-Id: {{adminId}}
Content-Type: application/json

{
  "action": "REJECT",
  "note": "Please refine"
}

### 11) Tác giả xem bài REJECTED -> 200
GET {{baseUrl}}/api/posts/{{postId}}
X-User-Id: {{userA}}

### 12) Người khác xem bài REJECTED -> 403
GET {{baseUrl}}/api/posts/{{postId}}
X-User-Id: {{userB}}

### 13) Danh sách bài của tôi (User A)
GET {{baseUrl}}/api/posts/me?page=0&size=10&sort=createdAt,desc
X-User-Id: {{userA}}

### 14) Xoá mềm bài (User A)
DELETE {{baseUrl}}/api/posts/{{postId}}
X-User-Id: {{userA}}

### 15) Feed sau xoá: bài đã xoá không còn (nếu trước đó approved)
GET {{baseUrl}}/api/posts/feed

### 16) Gọi admin list pending (để xem hàng chờ)
GET {{baseUrl}}/api/admin/posts/pending?page=0&size=10&sort=createdAt,desc
Authorization: Bearer {{adminJwt}}



/**
 * ============= USER FLOW — JWT (tuỳ chọn) =============
 * Yêu cầu: token chứa sub = userId (UUID) và roles ["USER"] hoặc ["ADMIN"].
 */

### (JWT) Tạo bài viết (USER)
# @name jwtCreatePost
POST {{baseUrl}}/api/posts
Content-Type: application/json
Authorization: Bearer {{userAJwt}}

{
  "title": "JWT Post",
  "content": "Created with JWT principal"
}

> {% client.global.set("postIdJwt", response.body.data.id); %}

### (JWT) Approve bằng token ADMIN
POST {{baseUrl}}/api/admin/posts/{{postIdJwt}}/moderate
Content-Type: application/json
Authorization: Bearer {{adminJwt}}

{
  "action": "APPROVE",
  "note": "Approved via JWT flow"
}

### (JWT) Feed
GET {{baseUrl}}/api/posts/feed
