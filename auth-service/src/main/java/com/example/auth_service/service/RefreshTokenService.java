package com.example.auth_service.service;

import com.example.auth_service.entity.RefreshToken;
import com.example.auth_service.entity.User;
import com.example.auth_service.repository.RefreshTokenRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
public class RefreshTokenService {

    private static final Logger logger = LoggerFactory.getLogger(RefreshTokenService.class);

    // Refresh token h·∫øt h·∫°n sau 7 ng√†y
    private static final long REFRESH_TOKEN_EXPIRATION_DAYS = 7;

    @Autowired
    private RefreshTokenRepository refreshTokenRepository;

    /**
     * T·∫°o refresh token m·ªõi cho user
     */
    @Transactional
    public RefreshToken createRefreshToken(User user) {
        // X√≥a refresh token c≈© c·ªßa user (ch·ªâ cho ph√©p 1 refresh token t·∫°i m·ªôt th·ªùi
        // ƒëi·ªÉm)
        refreshTokenRepository.deleteByUser(user);

        // T·∫°o refresh token m·ªõi
        String tokenValue = UUID.randomUUID().toString();
        LocalDateTime expiresAt = LocalDateTime.now().plusDays(REFRESH_TOKEN_EXPIRATION_DAYS);

        RefreshToken refreshToken = new RefreshToken(user, tokenValue, expiresAt);
        RefreshToken savedToken = refreshTokenRepository.save(refreshToken);

        logger.info("Created refresh token for user: {}, expires at: {}", user.getUsername(), expiresAt);
        return savedToken;
    }

    /**
     * Ki·ªÉm tra refresh token c√≥ h·ª£p l·ªá kh√¥ng
     */
    public boolean isRefreshTokenValid(String token) {
        Optional<RefreshToken> refreshTokenOpt = refreshTokenRepository.findByToken(token);

        if (refreshTokenOpt.isEmpty()) {
            logger.warn("Refresh token not found: {}", token);
            return false;
        }

        RefreshToken refreshToken = refreshTokenOpt.get();

        if (refreshToken.getExpiresAt().isBefore(LocalDateTime.now())) {
            logger.warn("Refresh token expired for user: {}", refreshToken.getUser().getUsername());
            // X√≥a token h·∫øt h·∫°n
            refreshTokenRepository.delete(refreshToken);
            return false;
        }

        return true;
    }

    /**
     * L·∫•y user t·ª´ refresh token
     */
    public Optional<User> getUserFromRefreshToken(String token) {
        Optional<RefreshToken> refreshTokenOpt = refreshTokenRepository.findByToken(token);

        if (refreshTokenOpt.isEmpty()) {
            return Optional.empty();
        }

        RefreshToken refreshToken = refreshTokenOpt.get();

        // Ki·ªÉm tra token h·∫øt h·∫°n
        if (refreshToken.getExpiresAt().isBefore(LocalDateTime.now())) {
            refreshTokenRepository.delete(refreshToken);
            return Optional.empty();
        }

        return Optional.of(refreshToken.getUser());
    }

    /**
     * X√≥a refresh token (logout)
     */
    @Transactional
    public void deleteRefreshToken(String token) {
        Optional<RefreshToken> refreshTokenOpt = refreshTokenRepository.findByToken(token);

        if (refreshTokenOpt.isPresent()) {
            RefreshToken refreshToken = refreshTokenOpt.get();
            logger.info("Deleting refresh token for user: {}", refreshToken.getUser().getUsername());
            refreshTokenRepository.delete(refreshToken);
        }
    }

    /**
     * X√≥a t·∫•t c·∫£ refresh token c·ªßa user (logout all devices)
     */
    @Transactional
    public void deleteAllRefreshTokensForUser(User user) {
        logger.info("Deleting all refresh tokens for user: {}", user.getUsername());
        refreshTokenRepository.deleteByUser(user);
    }

    /**
     * L√†m m·ªõi refresh token (t·∫°o token m·ªõi, x√≥a token c≈©)
     */
    @Transactional
    public RefreshToken refreshRefreshToken(String oldToken) {
        Optional<User> userOpt = getUserFromRefreshToken(oldToken);

        if (userOpt.isEmpty()) {
            throw new RuntimeException("Invalid refresh token");
        }

        User user = userOpt.get();

        // X√≥a token c≈©
        deleteRefreshToken(oldToken);

        // T·∫°o token m·ªõi
        return createRefreshToken(user);
    }

    /**
     * X√≥a t·∫•t c·∫£ refresh token c·ªßa user
     */
    @Transactional
    public int deleteAllRefreshTokensByUserId(UUID userId) {
        try {
            logger.info("üóëÔ∏è Attempting to delete refresh tokens for user: {}", userId);

            // ƒê·∫ßu ti√™n, t√¨m t·∫•t c·∫£ refresh token c·ªßa user
            List<RefreshToken> tokens = refreshTokenRepository.findByUserId(userId);
            int count = tokens.size();

            logger.info("üîç Found {} refresh tokens for user {}", count, userId);

            if (count > 0) {
                // X√≥a b·∫±ng c√°ch s·ª≠ d·ª•ng deleteByUserId
                refreshTokenRepository.deleteByUserId(userId);
                logger.info("‚úÖ Successfully deleted {} refresh tokens for user {}", count, userId);
            } else {
                logger.info("‚ÑπÔ∏è No refresh tokens found for user {}", userId);
            }

            return count;
        } catch (Exception e) {
            logger.error("‚ùå Error deleting all refresh tokens for user {}: {}", userId, e.getMessage(), e);
            return 0;
        }
    }
}
